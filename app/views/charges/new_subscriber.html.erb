<style>
	/**
 * The CSS shown here will not be introduced in the Quickstart guide, but shows
 * how you can use CSS to style your Element's container.
 */
 .StripeElement {
 	background-color: white;
 	padding: 8px 12px;
 	border-radius: 4px;
 	border: 1px solid transparent;
 	box-shadow: 0 1px 3px 0 #e6ebf1;
 	-webkit-transition: box-shadow 150ms ease;
 	transition: box-shadow 150ms ease;
 }

 .StripeElement--focus {
 	box-shadow: 0 1px 3px 0 #cfd7df;
 }

 .StripeElement--invalid {
 	border-color: #fa755a;
 }

 .StripeElement--webkit-autofill {
 	background-color: #fefde5 !important;
 }


svg{
  position:absolute;
   width:80%;
  top:20%;
 left:10%;
  visibility:hidden;
}
#container{
  position:absolute;
  width:100%;
  height:100%;
  text-align:center;
  margin-left:auto;
  margin-right:auto;
}

</style>


<script src="https://js.stripe.com/v3/"></script>

	
<div class="page-header header-filter" filter-color="purple" style="background-image: url('https://res.cloudinary.com/theblackandwhites/image/upload/v1497345579/bnw/assets/values.005.jpg'); background-size: cover; background-position: top center;">
	

	<div class="container">

		<%= render 'charges/rocket' %>	

	<div class="row">
		<div class="col-md-6 col-md-offset-3">
				<div class="card" style="padding: 40px;">
					<h3 class="card-title text-center">You're just seconds away!</h3>
					<div class="description text-center"  style="margin-bottom: 40px;">Please enter your payment details below. The inital charge is just $1 AUD if you choose to continue your next payment will be <%= (30.days.from_now).strftime("%d/%m/%Y") %> for $97. You can cancel anytime, there are no lock in contracts.</div>

					<div class="card-content">
						<%= form_tag create_subscription_path, :method => :post, :id => 'payment-form'  do %>
							<div class="form-row">
								<label for="card-element">
									Credit or debit card
								</label>
								<div id="card-element">
									<!-- a Stripe Element will be inserted here. -->
								</div>

								<!-- Used to display form errors -->
								<div id="card-errors" role="alert"></div>
							</div>
							<div class="text-center" style="margin-top: 20px;">
								<%= submit_tag "Start Your Trial", class: "btn btn-success btn-lg", data: { disable_with: "Please wait..." }%>
							</div>
						<% end %>
					</div>
				</div>
			</div>

		</div>

	</div>
</div>
</div>



<script>
// Create a Stripe client
var stripe = Stripe('<%= ENV["stripe_publishable_key"] %>');
// Create an instance of Elements
var elements = stripe.elements();

// Custom styling can be passed to options when creating an Element.
// (Note that this demo uses a wider set of styles than the guide below.)
var style = {
	base: {
		color: '#32325d',
		lineHeight: '24px',
		fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
		fontSmoothing: 'antialiased',
		fontSize: '16px',
		'::placeholder': {
			color: '#aab7c4'
		}
	},
	invalid: {
		color: '#fa755a',
		iconColor: '#fa755a'
	}
};

// Create an instance of the card Element
var card = elements.create('card', {style: style});

// Add an instance of the card Element into the `card-element` <div>
card.mount('#card-element');

// Handle real-time validation errors from the card Element.
card.addEventListener('change', function(event) {
	var displayError = document.getElementById('card-errors');
	if (event.error) {
		displayError.textContent = event.error.message;
	} else {
		displayError.textContent = '';
	}
});

// Handle form submission
var form = document.getElementById('payment-form');
form.addEventListener('submit', function(event) {
	event.preventDefault();

	stripe.createToken(card).then(function(result) {
		if (result.error) {
      // Inform the user if there was an error
      var errorElement = document.getElementById('card-errors');
      errorElement.textContent = result.error.message;
  } else {
      // Send the token to your server
      stripeTokenHandler(result.token);
  }
});
});


function stripeTokenHandler(token) {
  // Insert the token ID into the form so it gets submitted to the server
  var form = document.getElementById('payment-form');
  var hiddenInput = document.createElement('input');
  hiddenInput.setAttribute('type', 'hidden');
  hiddenInput.setAttribute('name', 'stripeToken');
  hiddenInput.setAttribute('value', token.id);
  form.appendChild(hiddenInput);

  // Submit the form
  form.submit();
}
</script>









<script src="https://s3-us-west-2.amazonaws.com/tbnw/js/TimelineMax.min.js"></script>
<script src="https://s3-us-west-2.amazonaws.com/tbnw/js/TweenMax.min.js"></script>
<script src="https://s3-us-west-2.amazonaws.com/tbnw/js/jquery.gsap.min.js"></script>
<script src="https://s3-us-west-2.amazonaws.com/tbnw/js/plugins/DrawSVGPlugin.min.js"></script>

<script>

jQuery(document).ready(function() {
    setTimeout(function() {
        


var container = document.getElementById('container');
var arches = document.getElementsByClassName('arches');
var archesSVGNode = document.querySelector('.arches-svg-node');
var splashLines = document.getElementsByClassName('splash-lines');
TweenMax.set(splashLines, {
  drawSVG:'40 60'
})

TweenMax.set('svg', {
  
  visibility:'visible'
})

//console.log(splashLines.getTotalLength())
var cloned = archesSVGNode.cloneNode(true);
container.appendChild(cloned)

TweenMax.set(cloned, {
  transformOrigin:'50% 100%',
  rotationX:180,
  y:'+=57',
  alpha:0.08
})

TweenMax.set(container, {
  position:'absolute',
  left:'50%',
  xPercent:-50,
  top:'50%',
  yPercent:-50
})
TweenMax.set(arches, {
  drawSVG:'100% 100%'
  
})


var tl = new TimelineMax({repeat:-1, yoyo:false, repeatDelay:1});
tl.timeScale(1);


tl.to(arches, 0.8, {
  drawSVG:'550 600',
  ease:Linear.easeNone
})

.to(arches, 2, {
  drawSVG:'-1% -5%',
  ease:Linear.easeNone
})

.to(splashLines, 0.8, {
  drawSVG:0,
  ease:Power2.easeOut,
  alpha:1
}, '-=0.2')

.to(splashLines, 0.8, {
  
  alpha:0
}, '-=0.65')



    }, 3000);
});




</script>

